//
// Functions (Mathematical Mixins)
// --------------------------------------------------


// Grid
// -------------------

@columnWidth: (@containerWidth / @columnCount) * (1 - unit(@gutterRatio) / 100);
@gutterWidth: (@containerWidth / @columnCount) - @columnWidth;

.container() {
	width: @columnWidth * @columnCount + @gutterWidth * @columnCount;
}

.column(@columns: 1, @offset: 0, @padding: 0) when (@columnCount >= (@columns+@offset)) {
  	@consideredColumns: (@columnCount * @columns) / @columnCount;
	
	.newColumn();
}

.column(@columns: 1, @offset: 0, @padding: 0) when (@columnCount < (@columns+@offset)) {
  	@consideredColumns: (@columnCount * @columns) / @columns;
  	@offset: 0;

	.newColumn();	
}

.newColumn() {
	@offsetWidth: @columnWidth * @offset + @gutterWidth * @offset;
	@width: (@columnWidth * @consideredColumns) + (@gutterWidth * (@consideredColumns - 1)) - ((@padding * (unit(@paddingRatio) / 100)) * 2);
	@unit: @columnWidth - @columnWidth;

	float: left;
	width: @width;
	margin-left: @offsetWidth+@gutterWidth/2;
  	margin-right: @gutterWidth/2;
	padding-left: @unit + @padding * (unit(@paddingRatio) / 100);
	padding-right: @unit + @padding * (unit(@paddingRatio) / 100);

	//core supporting styles
	img { max-width:100%; }
}